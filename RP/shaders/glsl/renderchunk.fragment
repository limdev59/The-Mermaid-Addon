// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

varying vec4 color;
varying vec3 position;//젖는 효과
varying vec3 cPos;
varying vec3 wpos;

#ifdef FOG
varying vec4 fogColor;
#endif

#include "uniformShaderConstants.h"
#include "util.h"
#include "snoise.h"
//비 감지를 위한 컨트롤러 호출
uniform vec2 FOG_CONTROL;
//안개 생성
uniform vec4 FOG_COLOR;
uniform float RENDER_DISTANCE;
uniform float TIME;
LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

void main()
{

#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 

#if USE_TEXEL_AA
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0);
#else
	vec4 diffuse = texture2D(TEXTURE_0, uv0);
#endif
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
#endif

#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;
#endif
	
vec4 inColor = color;

#if defined(BLEND)
	diffuse.a *= inColor.a;
#endif
//밤 어두움 값
vec4 diff2 = texture2D( TEXTURE_1, uv1 );
vec3 night = vec3(0.31, 0.75, 0.86);
//diff.rgb^(1.0 - night)
diff2.rgb *= pow(diff2.rgb, 1.0 - night);

#if !defined(ALWAYS_LIT)
	diffuse *= diff2;
#endif

#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		diffuse.a = inColor.a;
	#endif
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

bool nether = (FOG_COLOR.r > FOG_COLOR.b && FOG_COLOR.r <0.5 && FOG_COLOR.b<0.2);
//네더 쉐이더
if(nether==true){
diffuse.rgb += vec3(0.35,0.25,0.13)*1.2;
//네더안개 rgb Mix
vec3 nfog = mix(diffuse.rgb, FOG_COLOR.rgb*vec3(1.9,1.9,0.6), clamp(length (-wpos)/RENDER_DISTANCE*1.1,0.0,0.6));
//네더안개 rgb값 저장
diffuse.rgb = nfog;
}
if(nether==false){/*햇빛*/diffuse.rgb *= vec3(1.87, 1.74, 1.6);}
/*
float smoothstep(float edge0, float edge1, float kx) { 
kx = clamp((kx - edge0) / (edge1 - edge0), 0.0, 1.0);
return kx * kx * (3 - 2 * kx); }
vec3 n = normalize(cross(dFdx(cPos),dFdy(cPos)));

vec2 daylight = texture2D(TEXTURE_1,vec2(0.0,1.0)).rr;
float dusk = min(smoothstep(0.4,0.55,daylight.y),smoothstep(0.8,0.65,daylight.y));
float sunlight = smoothstep(0.865,0.875,uv1.y);

float ao = 1.0;
if(color.r==color.g && color.g==color.b) {
ao = smoothstep(0.48*daylight.y,0.52*daylight.y,color.g);
diffuse.rgb *= 1.0-mix(0.5,0.0,min(sunlight,ao))*(1.0-uv1.x)*daylight.x;}
#if defined(FANCY) && defined(USE_NORMAL)//FLAT_SHADING
	float fl_s = min(1.0,dot(n,vec3(0.0,0.8,0.6))*0.45+0.64);
	fl_s = mix(fl_s,max(dot(n,vec3(0.9,0.44,0.0)),dot(n,vec3(-0.9,0.44,0.0)))*1.3+0.2,dusk);
	diffuse.rgb *= mix(1.0,fl_s,smoothstep(0.7,0.95,uv1.y)*min(1.25-uv1.x,1.0)*daylight.x);
#endif
*/

//바닥 그림자  범위:그림자 세기+빛 세기
if(uv1.y<0.865){diffuse.rgb *=vec3(0.845,0.845,0.885)+uv1.x*vec3(0.22, 0.22, 0.17)*1.1;}
if(uv1.y<0.8645){diffuse.rgb *=vec3(0.825,0.825,0.865)+uv1.x*vec3(0.24, 0.24, 0.19)*1.1;}
if(uv1.y<0.864){diffuse.rgb *=vec3(0.805,0.805,0.845)+uv1.x*vec3(0.26, 0.26,0.21)*1.1;}
if(uv1.y<0.8635){diffuse.rgb *=vec3(0.785,0.785,0.815)+uv1.x*vec3(0.295,0.295,0.245)*1.1;}

if(color.a !=0.0){
//벽 그림자
if(color.g<0.624){diffuse.rgb *=vec3(0.845,0.845,0.885)+uv1.x*vec3(0.22, 0.22, 0.17)*1.2;}
if(color.g<0.623){diffuse.rgb *=vec3(0.825,0.825,0.865)+uv1.x*vec3(0.24, 0.24, 0.19)*1.2;}
if(color.g<0.622){diffuse.rgb *=vec3(0.805,0.805,0.845)+uv1.x*vec3(0.26, 0.26,0.21)*1.2;}
//if(color.g<0.621){diffuse.rgb *=vec3(0.785,0.785,0.815)+uv1.x*vec3(0.295,0.295,0.245)*1.2;}
}
if(color.a==0.0){
diffuse.rgb *= 1.1;
diffuse.rgb *= color.g*1.3;
}
diffuse.rgb += diffuse.rgb*(vec3(1.5, 0.5, 0.0) * 1.15) * pow(uv1.x * 1.1, 6.0);
//비 감지
float rain_detect =1.0 - pow(FOG_CONTROL.y, 11.0);
diffuse.rgb += vec3(-0.2,-0.15,-0.1);
//젖는효과 
if(uv1.y>0.875){if(fract(position.y)==0.0){diffuse.rgb += sin(position.x + position.y+position.z)*0.02*rain_detect;}}

//안개 색
#if defined(BLEND) || defined(FOG)
if(color.b>color.r){
diffuse.rgb *=vec3(0.0);
//물색
diffuse.rgb +=vec3(0.11, 0.72,1.2);


//물 그라데이션
diffuse.rgb += clamp(length(wpos.xz*3.0)/RENDER_DISTANCE*2.0,0.0,0.8)*vec3(0.02, 0.35, 0.23);
if(uv1.y<0.875){diffuse.rgb += vec3(-0.35);}
//물
diffuse.a *= clamp(length(wpos.xyz*3.0)/RENDER_DISTANCE*1.0,0.3,0.7);

//물에 비치는 해
if(FOG_COLOR.r*1.0>FOG_COLOR.b){
diffuse.rgb += clamp(1.0-length(-wpos.z*10.0)/RENDER_DISTANCE*1.0, 0.0, 1.0)*vec3(2.0,1.78,0.0)*length(-wpos.x)/RENDER_DISTANCE*1.0;
}
}
#endif

if(nether==false){
if(FOG_CONTROL.x==0.0){

diffuse.rgb *= vec3(0.95, sin(TIME*0.5)*0.28 + 1.4, sin((TIME+3.141592)*0.5)*0.15 + 1.95);
highp float caustic = sin(position.x+position.y+position.x+position.z)+sin(TIME*4.0+position.x);

diffuse.rgb += caustic*vec3(0.0,0.07,0.17)*uv1.y;

diffuse.rgb += diffuse.rgb*(vec3(0.15, 0.03, -0.175) * 1.1) * pow(uv1.x * 1.1, 1.0);
}
}

#ifdef FOG
	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
#endif
//안개 rgb Mix
vec3 fog = mix(diffuse.rgb, FOG_COLOR.rgb*vec3(0.65,0.79,0.69), clamp(length (-wpos)/RENDER_DISTANCE*1.5,0.0,0.7));
//안개 rgb값 저장
diffuse.rgb = fog;

	gl_FragColor = diffuse;
	
#endif // BYPASS_PIXEL_SHADER
}
